<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>GroovyConsoleExecutor</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>XWiki.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>xwiki:XWiki.jvelo</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.jvelo</contentAuthor>
<creationDate>1241713705000</creationDate>
<date>1339794645000</date>
<contentUpdateDate>1339794645000</contentUpdateDate>
<version>2.8</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.GroovyConsoleExecutor</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>3aab2d1a-40d5-480f-aa0f-35f500b8a2a1</guid>
<property>
<tags/>
</property>
</object>
<content>{{groovy}}
import org.codehaus.groovy.control.MultipleCompilationErrorsException

if(request.xpage == "plain" &amp;&amp; xwiki.hasAccessLevel("programming", doc.fullName)) {

def scriptText = request.getParameter("script") ?: "'The received script was null.'"

def output = new StringWriter()
def binding = new Binding([out: new PrintWriter(output), xwiki:xwiki, context:context, request:request, util:util])

def stacktrace = new StringWriter()
def errWriter = new PrintWriter(stacktrace)

def result = ""
try {
	result = new GroovyShell(binding).evaluate(scriptText)
} catch (MultipleCompilationErrorsException e) {
	stacktrace.append(e.message - 'startup failed, Script1.groovy: ')
} catch (Throwable t) {
	sanitizeStacktrace(t)
	def cause = t
	while (cause = cause?.cause) {
		sanitizeStacktrace(cause)
	}
	t.printStackTrace(errWriter)
}

response.contentType = "application/json"
def json = [
  "executionResult" : result,
  "outputText" : output.toString(),
  "stacktraceText" : stacktrace.toString()
]
def builder = new groovy.json.JsonBuilder(json)
println """{{{ ${builder.toString()} }}}"""

}

else if (!xwiki.hasAccessLevel("programming", doc.fullName)) {
   response.setStatus(403)
   println "You don't have programming access"
}
else {
   println "This is a groovy executor"
}

def sanitizeStacktrace(t) {
    def filtered = [
        'com.google.', 'org.mortbay.',
        'java.', 'javax.', 'sun.', 
        'groovy.', 'org.codehaus.groovy.', 
        'com.xpn.xwiki.render', 'org.apache.velocity',
        'org.xwiki.velocity', 'com.xpn.xwiki',
        'org.apache.struts', 'Script1'
	]
    def trace = t.getStackTrace()
    def newTrace = []
    trace.each { stackTraceElement -&gt; 
        if (filtered.every { !stackTraceElement.className.startsWith(it) }) {
            newTrace &lt;&lt; stackTraceElement
        }
    }
    def clean = newTrace.toArray(newTrace as StackTraceElement[])
    t.stackTrace = clean
}
{{/groovy}}</content></xwikidoc>
