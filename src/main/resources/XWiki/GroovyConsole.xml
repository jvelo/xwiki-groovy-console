<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>GroovyConsole</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>XWiki.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1241714868000</creationDate>
<date>1339759051000</date>
<contentUpdateDate>1339759051000</contentUpdateDate>
<version>4.3</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden><attachment>
<filename>groovy.png</filename>
<filesize>17560</filesize>
<author>XWiki.Admin</author>
<date>1241779437000</date>
<version>1.1</version>
<comment></comment><content>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
qVOnvv7661ZWVsnJyaIoBgQErFq1as+ePStXrMCYk2XCnpcJ8fb2fu311xITE5977jmMceLOnWzX
SXV19dSpUw0Gw+zZs/v27WswGBBClBIGVnt7+4SEhK1btwLAhx9++Msvv1y+fJk5q956661vvvlm
9uzZH3/8MeNnRnr6nj17unfvHh8fn5CQYG1tzVSMnZ3d+fPnt23b1rlz53ffffebr7++cPEik3xf
f/1Nr549J02atG7dOvV+E0IIQig3N/frr7/+7rvv/P39MzIymFRuERzS7e1PRZMJMEaUUF5DZYl9
QJIZMEcBIQAKFMuizAlIkniNhtdamURRV5KTf/3KhYxMKTeLxzzgX6MQPD09IyMjR44c2aNHnIeH
Z33w1fr2lO9qNcziAXv27Pn999/v3bv3yy+/7N69u7u7uyzLsixJJkPerSsnfly9dfb7h5Z9lXrm
REVhnmBlhQWNRKneLBpqqg2SbDKaRLPJJElGSTaKkkRoxd2c/DvpAIARAoARw4e7ubldv37dbDaz
IciUPZOmCKE2bdpQSk0mE2Pl0qVLi4qK3nnnHeaHtLa2joyMlCRJp9N17NhRPZoJIeHh4V9//bWV
lVVoaChCSKPRiKIYGRk5ZcoUSZKGDh06c+bMrl27rlixws3N9ejRow9oHEoB4G9/+5utre2NGze6
dOlCKf3w/fcZBzDGHMZffvllTk5OXI8eivzgOK5nz55nzpzJzMysqakhhHh7e69ZsyY2tjNTKwAw
d+7c1q1bDxs2jFKKMS4vL582bRqltHtcHABkZGQwn7Cjo+N3333Hcdzx48dXrlo16dVXPT29CCEY
44rysn/84x8tWrTo3r07pVQtxliPbty4MT09vXv37gBACAWA3JzcyuJ7MkImk8koU5PRYDKLRomY
DAajRIxms8lk1Bv0er3BRDHFHGetM1RX5167eOHn71f/84uNq1ekHdtXWV4mEUmSJBsbm3bt2k2b
Nu3nn39OSkoaPXq0h4enYjr/auAr3aFun2JUsuHODL0WLVq89957O3fu3LBhw3vvvx8SEgIcZgUY
DYabvxw+8O3nh5bOO5mwsujWFWwy2Nvb2zo48hwHskQlCROCAWGMOSBFmakVRQUYc4RQjNGYMWMo
penp6WDxKN6/fz8/P58tsFBK27ZtO3LkSG9v706dOm3evDk+Pn7cuHHl5eWsbZGRkXa2tl9//XV1
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
rkJggg==
</content></attachment><attachment>
<filename>Nopassingusa.png</filename>
<filesize>3801</filesize>
<author>XWiki.Admin</author>
<date>1241731304000</date>
<version>1.1</version>
<comment></comment><content>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
</content></attachment>
<object>
<name>XWiki.GroovyConsole</name>
<number>0</number>
<className>XWiki.ConsoleScriptClass</className>
<guid>80ae05d0-0c1a-4dd5-8ba8-3755b6e18d2d</guid>
</object>
<object>
<name>XWiki.GroovyConsole</name>
<number>1</number>
<className>XWiki.ConsoleScriptClass</className>
<guid>6ab6bfeb-2e84-4f46-b9f8-702f959e02a2</guid>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.GroovyConsole</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>ccd50af7-87bd-46e2-a498-c019f0a6144a</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>/* CodeMirror main module
 *
 * Implements the CodeMirror constructor and prototype, which take care
 * of initializing the editor frame, and providing the outside interface.
 */

// The CodeMirrorConfig object is used to specify a default
// configuration. If you specify such an object before loading this
// file, the values you put into it will override the defaults given
// below. You can also assign to it after loading.
var CodeMirrorConfig = window.CodeMirrorConfig || {};

var CodeMirror = (function(){
  function setDefaults(object, defaults) {
    for (var option in defaults) {
      if (!object.hasOwnProperty(option))
        object[option] = defaults[option];
    }
  }
  function forEach(array, action) {
    for (var i = 0; i &lt; array.length; i++)
      action(array[i]);
  }

  // These default options can be overridden by passing a set of
  // options to a specific CodeMirror constructor. See manual.html for
  // their meaning.
  setDefaults(CodeMirrorConfig, {
    stylesheet: "",
    path: "",
    parserfile: [],
    basefiles: ["GroovyConsoleEditorCode"],
    linesPerPass: 30,
    passDelay: 200,
    continuousScanning: false,
    saveFunction: null,
    onChange: null,
    undoDepth: 50,
    undoDelay: 800,
    disableSpellcheck: true,
    textWrapping: true,
    readOnly: false,
    width: "100%",
    height: "300px",
    autoMatchParens: false,
    parserConfig: null,
    tabMode: "indent", // or "spaces", "default", "shift"
    activeTokens: null,
    cursorActivity: null,
    lineNumbers: false,
    indentUnit: 2
  });

  function wrapLineNumberDiv(place) {
    return function(node) {
      var container = document.createElement("DIV"),
          nums = document.createElement("DIV"),
          scroller = document.createElement("DIV");
      container.style.position = "relative";
      nums.style.position = "absolute";
      nums.style.height = "100%";
      if (nums.style.setExpression)
        nums.style.setExpression("height", "this.previousSibling.offsetHeight + 'px'");
      nums.style.top = "0px";
      nums.style.overflow = "hidden";
      place(container);
      container.appendChild(node);
      container.appendChild(nums);
      scroller.className = "CodeMirror-line-numbers";
      nums.appendChild(scroller);
    }
  }

  function applyLineNumbers(frame) {
    var win = frame.contentWindow, doc = win.document,
        nums = frame.nextSibling, scroller = nums.firstChild;

    var nextNum = 1, barWidth = null;
    function sizeBar() {
      if (nums.offsetWidth != barWidth) {
        barWidth = nums.offsetWidth;
        nums.style.left = "-" + (frame.parentNode.style.marginLeft = barWidth + "px");
      }
    }
    function update() {
      var diff = 20 + Math.max(doc.body.offsetHeight, frame.offsetHeight) - scroller.offsetHeight;
      for (var n = Math.ceil(diff / 10); n &gt; 0; n--) {
        scroller.appendChild(document.createTextNode(nextNum++));
        scroller.appendChild(document.createElement("BR"));
      }
      nums.scrollTop = doc.body.scrollTop || doc.documentElement.scrollTop || 0;
    }
    sizeBar();
    update();
    win.addEventHandler(win, "scroll", update);
    setInterval(sizeBar, 500);
  }

  function CodeMirror(place, options) {
    // Backward compatibility for deprecated options.
    if (options.dumbTabs) options.tabMode = "spaces";
    else if (options.normalTab) options.tabMode = "default";

    // Use passed options, if any, to override defaults.
    this.options = options = options || {};
    setDefaults(options, CodeMirrorConfig);

    var frame = this.frame = document.createElement("IFRAME");
    frame.frameBorder = 0;
    frame.src = "javascript:false;";
    frame.style.border = "0";
    frame.style.width = options.width;
    frame.style.height = options.height;
    // display: block occasionally suppresses some Firefox bugs, so we
    // always add it, redundant as it sounds.
    frame.style.display = "block";

    if (place.appendChild) {
      var node = place;
      place = function(n){node.appendChild(n);};
    }
    if (options.lineNumbers) place = wrapLineNumberDiv(place);
    place(frame);

    // Link back to this object, so that the editor can fetch options
    // and add a reference to itself.
    frame.CodeMirror = this;
    this.win = frame.contentWindow;

    if (typeof options.parserfile == "string")
      options.parserfile = [options.parserfile];
    if (typeof options.stylesheet == "string")
      options.stylesheet = [options.stylesheet];

    var html = ["&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;"];
    forEach(options.stylesheet, function(file) {
      html.push("&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"" + file + "\"/&gt;");
    });
    forEach(options.basefiles.concat(options.parserfile), function(file) {
      html.push("&lt;script type=\"text/javascript\" src=\"" + options.path + file + "\"&gt;&lt;/script&gt;");
    });
    html.push("&lt;/head&gt;&lt;body style=\"border-width: 0;\" class=\"editbox\" spellcheck=\"" +
              (options.disableSpellcheck ? "false" : "true") + "\"&gt;&lt;/body&gt;&lt;/html&gt;");

    var doc = this.win.document;
    doc.open();
    doc.write(html.join(""));
    doc.close();
  }

  CodeMirror.prototype = {
    init: function() {
      if (this.options.initCallback) this.options.initCallback(this);
      if (this.options.lineNumbers) applyLineNumbers(this.frame);
    },

    getCode: function() {return this.editor.getCode();},
    setCode: function(code) {this.editor.importCode(code);},
    selection: function() {return this.editor.selectedText();},
    reindent: function() {this.editor.reindent();},

    focus: function() {
      this.win.focus();
      if (this.editor.selectionSnapshot) // IE hack
        this.win.select.selectCoords(this.win, this.editor.selectionSnapshot);
    },
    replaceSelection: function(text) {
      this.focus();
      this.editor.replaceSelection(text);
      return true;
    },
    replaceChars: function(text, start, end) {
      this.editor.replaceChars(text, start, end);
    },
    getSearchCursor: function(string, fromCursor) {
      return this.editor.getSearchCursor(string, fromCursor);
    },

    undo: function() {this.editor.history.undo();},
    redo: function() {this.editor.history.redo();},
    historySize: function() {return this.editor.history.historySize();},

    grabKeys: function(callback, filter) {this.editor.grabKeys(callback, filter);},
    ungrabKeys: function() {this.editor.ungrabKeys();},

    cursorPosition: function(start) {
      if (this.win.select.ie_selection) this.focus();
      return this.editor.cursorPosition(start);
    },
    firstLine: function() {return this.editor.firstLine();},
    lastLine: function() {return this.editor.lastLine();},
    nextLine: function(line) {return this.editor.nextLine(line);},
    prevLine: function(line) {return this.editor.prevLine(line);},
    lineContent: function(line) {return this.editor.lineContent(line);},
    setLineContent: function(line, content) {this.editor.setLineContent(line, content);},
    insertIntoLine: function(line, position, content) {this.editor.insertIntoLine(line, position, content);},
    selectLines: function(startLine, startOffset, endLine, endOffset) {
      this.win.focus();
      this.editor.selectLines(startLine, startOffset, endLine, endOffset);
    },
    nthLine: function(n) {
      var line = this.firstLine();
      for (; n &gt; 1 &amp;&amp; line !== false; n--)
        line = this.nextLine(line);
      return line;
    },
    lineNumber: function(line) {
      var num = 0;
      while (line !== false) {
        num++;
        line = this.prevLine(line);
      }
      return num;
    },

    // Old number-based line interface
    jumpToLine: function(n) {
      this.selectLines(this.nthLine(n), 0);
      this.win.focus();
    },
    currentLine: function() {
      return this.lineNumber(this.cursorPosition().line);
    }
  };

  CodeMirror.InvalidLineHandle = {toString: function(){return "CodeMirror.InvalidLineHandle";}};

  CodeMirror.replace = function(element) {
    if (typeof element == "string")
      element = document.getElementById(element);
    return function(newElement) {
      element.parentNode.replaceChild(newElement, element);
    };
  };

  CodeMirror.fromTextArea = function(area, options) {
    if (typeof area == "string")
      area = document.getElementById(area);

    options = options || {};
    if (area.style.width) options.width = area.style.width;
    if (area.style.height) options.height = area.style.height;
    if (options.content == null) options.content = area.value;

    if (area.form) {
      function updateField() {
        area.value = mirror.getCode();
      }
      if (typeof area.form.addEventListener == "function")
        area.form.addEventListener("submit", updateField, false);
      else
        area.form.attachEvent("onsubmit", updateField);
    }

    function insert(frame) {
      if (area.nextSibling)
        area.parentNode.insertBefore(frame, area.nextSibling);
      else
        area.parentNode.appendChild(frame);
    }

    area.style.display = "none";
    var mirror = new CodeMirror(insert, options);
    return mirror;
  };

  CodeMirror.isProbablySupported = function() {
    // This is rather awful, but can be useful.
    var match;
    if (window.opera)
      return Number(window.opera.version()) &gt;= 9.52;
    else if (/Apple Computers, Inc/.test(navigator.vendor) &amp;&amp; (match = navigator.userAgent.match(/Version\/(\d+(?:\.\d+)?)\./)))
      return Number(match[1]) &gt;= 3;
    else if (document.selection &amp;&amp; window.ActiveXObject &amp;&amp; (match = navigator.userAgent.match(/MSIE (\d+(?:\.\d*)?)\b/)))
      return Number(match[1]) &gt;= 6;
    else if (match = navigator.userAgent.match(/gecko\/(\d{8})/i))
      return Number(match[1]) &gt;= 20050901;
    else if (match = navigator.userAgent.match(/AppleWebKit\/(\d+)/))
      return Number(match[1]) &gt;= 525;
    else
      return null;
  };

  return CodeMirror;
})();

/* Demonstration of embedding CodeMirror in a bigger application. The
 * interface defined here is a mess of prompts and confirms, and
 * should probably not be used in a real project.
 */

function MirrorFrame(place, options) {
  this.home = document.createElement("DIV");
  if (place.appendChild)
    place.appendChild(this.home);
  else
    place(this.home);

  var self = this;
  function makeButton(name, action) {
    var button = document.createElement("INPUT");
    button.type = "button";
    button.value = name;
    self.home.appendChild(button);
    button.onclick = function(){self[action].call(self);};
  }

  makeButton("Search", "search");
  makeButton("Replace", "replace");
  makeButton("Current line", "line");
  makeButton("Jump to line", "jump");
  makeButton("Insert constructor", "macro");
  makeButton("Indent all", "reindent");

  this.mirror = new CodeMirror(this.home, options);
}

MirrorFrame.prototype = {
  search: function() {
    var text = prompt("Enter search term:", "");
    if (!text) return;

    var first = true;
    do {
      var cursor = this.mirror.getSearchCursor(text, first);
      first = false;
      while (cursor.findNext()) {
        cursor.select();
        if (!confirm("Search again?"))
          return;
      }
    } while (confirm("End of document reached. Start over?"));
  },

  replace: function() {
    // This is a replace-all, but it is possible to implement a
    // prompting replace.
    var from = prompt("Enter search string:", ""), to;
    if (from) to = prompt("What should it be replaced with?", "");
    if (to == null) return;

    var cursor = this.mirror.getSearchCursor(from, false);
    while (cursor.findNext())
      cursor.replace(to);
  },

  jump: function() {
    var line = prompt("Jump to line:", "");
    if (line &amp;&amp; !isNaN(Number(line)))
      this.mirror.jumpToLine(Number(line));
  },

  line: function() {
    alert("The cursor is currently at line " + this.mirror.currentLine());
    this.mirror.focus();
  },

  macro: function() {
    var name = prompt("Name your constructor:", "");
    if (name)
      this.mirror.replaceSelection("function " + name + "() {\n  \n}\n\n" + name + ".prototype = {\n  \n};\n");
  },

  reindent: function() {
    this.mirror.reindent();
  }
};

</code></property><property><name>groovy web console</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.GroovyConsole</name>
<number>1</number>
<className>XWiki.JavaScriptExtension</className>
<guid>e05468e2-c5d8-4d19-8495-d6f8d29e2b34</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>document.observe("dom:loaded", function() {

    var tabs = new Control.Tabs('tabs');  

    $("executeButton").observe("click", function(event) {
                $('loadingDiv').removeClassName("hidden");
		var ajx = new Ajax.Request("$xwiki.getURL('XWiki.GroovyConsoleExecutor','view','xpage=plain')", {
		   	method: "POST",
		        parameters: { script: editor.getCode() },
                        onSuccess: function(transport) {
                               $('loadingDiv').addClassName("hidden");
                                var data = eval ('(' + transport.responseText + ')');
				$('output').innerHTML = "";
				$('result').innerHTML = "";
				$('stacktrace').innerHTML = "";
				
				if (data.outputText.length &gt; 0) {
					$('output').innerHTML = data.outputText;
					tabs.setActiveTab("toutput");
				} else {
					//$('output').fadeOut();
				}

				if (data.executionResult.length &gt; 0) {
					$('result').innerHTML = data.executionResult;
					if (data.executionResult != "null") {
						tabs.setActiveTab("tresult");
					}
				} else {
					//$('result').fadeOut();
				}
				
				if (data.stacktraceText.length &gt; 0) {
					$('stacktrace').innerHTML = data.stacktraceText;
                                        tabs.setActiveTab("tstacktrace");
				} else {
					//$('stacktrace').fadeOut();
				}
		    },

			error: function (XMLHttpRequest, textStatus, errorThrown) {
				alert("Error interacting with the Groovy web console server: " + errorThrown);
			}

		});
    });

});</code>
</property>
<property>
<name>groovy console</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.GroovyConsole</name>
<number>2</number>
<className>XWiki.JavaScriptExtension</className>
<guid>0b6ac5be-b45b-401e-b21b-8f64d490187e</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>/**
 * @author Ryan Johnson &lt;http://syntacticx.com/&gt;
 * @copyright 2008 PersonalGrid Corporation &lt;http://personalgrid.com/&gt;
 * @package LivePipe UI
 * @license MIT
 * @url http://livepipe.net/core
 * @require prototype.js
 */

if(typeof(Control) == 'undefined')
	Control = {};
	
var $proc = function(proc){
	return typeof(proc) == 'function' ? proc : function(){return proc};
};

var $value = function(value){
	return typeof(value) == 'function' ? value() : value;
};

Object.Event = {
	extend: function(object){
		object._objectEventSetup = function(event_name){
			this._observers = this._observers || {};
			this._observers[event_name] = this._observers[event_name] || [];
		};
		object.observe = function(event_name,observer){
			if(typeof(event_name) == 'string' &amp;&amp; typeof(observer) != 'undefined'){
				this._objectEventSetup(event_name);
				if(!this._observers[event_name].include(observer))
					this._observers[event_name].push(observer);
			}else
				for(var e in event_name)
					this.observe(e,event_name[e]);
		};
		object.stopObserving = function(event_name,observer){
			this._objectEventSetup(event_name);
			if(event_name &amp;&amp; observer)
				this._observers[event_name] = this._observers[event_name].without(observer);
			else if(event_name)
				this._observers[event_name] = [];
			else
				this._observers = {};
		};
		object.observeOnce = function(event_name,outer_observer){
			var inner_observer = function(){
				outer_observer.apply(this,arguments);
				this.stopObserving(event_name,inner_observer);
			}.bind(this);
			this._objectEventSetup(event_name);
			this._observers[event_name].push(inner_observer);
		};
		object.notify = function(event_name){
			this._objectEventSetup(event_name);
			var collected_return_values = [];
			var args = $A(arguments).slice(1);
			try{
				for(var i = 0; i &lt; this._observers[event_name].length; ++i)
					collected_return_values.push(this._observers[event_name][i].apply(this._observers[event_name][i],args) || null);
			}catch(e){
				if(e == $break)
					return false;
				else
					throw e;
			}
			return collected_return_values;
		};
		if(object.prototype){
			object.prototype._objectEventSetup = object._objectEventSetup;
			object.prototype.observe = object.observe;
			object.prototype.stopObserving = object.stopObserving;
			object.prototype.observeOnce = object.observeOnce;
			object.prototype.notify = function(event_name){
				if(object.notify){
					var args = $A(arguments).slice(1);
					args.unshift(this);
					args.unshift(event_name);
					object.notify.apply(object,args);
				}
				this._objectEventSetup(event_name);
				var args = $A(arguments).slice(1);
				var collected_return_values = [];
				try{
					if(this.options &amp;&amp; this.options[event_name] &amp;&amp; typeof(this.options[event_name]) == 'function')
						collected_return_values.push(this.options[event_name].apply(this,args) || null);
					for(var i = 0; i &lt; this._observers[event_name].length; ++i)
						collected_return_values.push(this._observers[event_name][i].apply(this._observers[event_name][i],args) || null);
				}catch(e){
					if(e == $break)
						return false;
					else
						throw e;
				}
				return collected_return_values;
			};
		}
	}
};

/* Begin Core Extensions */

//Element.observeOnce
Element.addMethods({
	observeOnce: function(element,event_name,outer_callback){
		var inner_callback = function(){
			outer_callback.apply(this,arguments);
			Element.stopObserving(element,event_name,inner_callback);
		};
		Element.observe(element,event_name,inner_callback);
	}
});

//mouseenter, mouseleave
//from http://dev.rubyonrails.org/attachment/ticket/8354/event_mouseenter_106rc1.patch
Object.extend(Event, (function() {
	var cache = Event.cache;

	function getEventID(element) {
		if (element._prototypeEventID) return element._prototypeEventID[0];
		arguments.callee.id = arguments.callee.id || 1;
		return element._prototypeEventID = [++arguments.callee.id];
	}

	function getDOMEventName(eventName) {
		if (eventName &amp;&amp; eventName.include(':')) return "dataavailable";
		//begin extension
		if(!Prototype.Browser.IE){
			eventName = {
				mouseenter: 'mouseover',
				mouseleave: 'mouseout'
			}[eventName] || eventName;
		}
		//end extension
		return eventName;
	}

	function getCacheForID(id) {
		return cache[id] = cache[id] || { };
	}

	function getWrappersForEventName(id, eventName) {
		var c = getCacheForID(id);
		return c[eventName] = c[eventName] || [];
	}

	function createWrapper(element, eventName, handler) {
		var id = getEventID(element);
		var c = getWrappersForEventName(id, eventName);
		if (c.pluck("handler").include(handler)) return false;

		var wrapper = function(event) {
			if (!Event || !Event.extend ||
				(event.eventName &amp;&amp; event.eventName != eventName))
					return false;

			Event.extend(event);
			handler.call(element, event);
		};
		
		//begin extension
		if(!(Prototype.Browser.IE) &amp;&amp; ['mouseenter','mouseleave'].include(eventName)){
			wrapper = wrapper.wrap(function(proceed,event) {	
				var rel = event.relatedTarget;
				var cur = event.currentTarget;			 
				if(rel &amp;&amp; rel.nodeType == Node.TEXT_NODE)
					rel = rel.parentNode;	  
				if(rel &amp;&amp; rel != cur &amp;&amp; !rel.descendantOf(cur))	  
					return proceed(event);   
			});	 
		}
		//end extension

		wrapper.handler = handler;
		c.push(wrapper);
		return wrapper;
	}

	function findWrapper(id, eventName, handler) {
		var c = getWrappersForEventName(id, eventName);
		return c.find(function(wrapper) { return wrapper.handler == handler });
	}

	function destroyWrapper(id, eventName, handler) {
		var c = getCacheForID(id);
		if (!c[eventName]) return false;
		c[eventName] = c[eventName].without(findWrapper(id, eventName, handler));
	}

	function destroyCache() {
		for (var id in cache)
			for (var eventName in cache[id])
				cache[id][eventName] = null;
	}

	if (window.attachEvent) {
		window.attachEvent("onunload", destroyCache);
	}

	return {
		observe: function(element, eventName, handler) {
			element = $(element);
			var name = getDOMEventName(eventName);

			var wrapper = createWrapper(element, eventName, handler);
			if (!wrapper) return element;

			if (element.addEventListener) {
				element.addEventListener(name, wrapper, false);
			} else {
				element.attachEvent("on" + name, wrapper);
			}

			return element;
		},

		stopObserving: function(element, eventName, handler) {
			element = $(element);
			var id = getEventID(element), name = getDOMEventName(eventName);

			if (!handler &amp;&amp; eventName) {
				getWrappersForEventName(id, eventName).each(function(wrapper) {
					element.stopObserving(eventName, wrapper.handler);
				});
				return element;

			} else if (!eventName) {
				Object.keys(getCacheForID(id)).each(function(eventName) {
					element.stopObserving(eventName);
				});
				return element;
			}

			var wrapper = findWrapper(id, eventName, handler);
			if (!wrapper) return element;

			if (element.removeEventListener) {
				element.removeEventListener(name, wrapper, false);
			} else {
				element.detachEvent("on" + name, wrapper);
			}

			destroyWrapper(id, eventName, handler);

			return element;
		},

		fire: function(element, eventName, memo) {
			element = $(element);
			if (element == document &amp;&amp; document.createEvent &amp;&amp; !element.dispatchEvent)
				element = document.documentElement;

			var event;
			if (document.createEvent) {
				event = document.createEvent("HTMLEvents");
				event.initEvent("dataavailable", true, true);
			} else {
				event = document.createEventObject();
				event.eventType = "ondataavailable";
			}

			event.eventName = eventName;
			event.memo = memo || { };

			if (document.createEvent) {
				element.dispatchEvent(event);
			} else {
				element.fireEvent(event.eventType, event);
			}

			return Event.extend(event);
		}
	};
})());

Object.extend(Event, Event.Methods);

Element.addMethods({
	fire:			Event.fire,
	observe:		Event.observe,
	stopObserving:	Event.stopObserving
});

Object.extend(document, {
	fire:			Element.Methods.fire.methodize(),
	observe:		Element.Methods.observe.methodize(),
	stopObserving:	Element.Methods.stopObserving.methodize()
});

//mouse:wheel
(function(){
	function wheel(event){
		var delta;
		// normalize the delta
		if(event.wheelDelta) // IE &amp; Opera
			delta = event.wheelDelta / 120;
		else if (event.detail) // W3C
			delta =- event.detail / 3;
		if(!delta)
			return;
		var custom_event = event.element().fire('mouse:wheel',{
			delta: delta
		});
		if(custom_event.stopped){
			event.stop();
			return false;
		}
	}
	document.observe('mousewheel',wheel);
	document.observe('DOMMouseScroll',wheel);
})();

/* End Core Extensions */

//from PrototypeUI
var IframeShim = Class.create({
	initialize: function() {
		this.element = new Element('iframe',{
			style: 'position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);display:none',
			src: 'javascript:void(0);',
			frameborder: 0 
		});
		$(document.body).insert(this.element);
	},
	hide: function() {
		this.element.hide();
		return this;
	},
	show: function() {
		this.element.show();
		return this;
	},
	positionUnder: function(element) {
		var element = $(element);
		var offset = element.cumulativeOffset();
		var dimensions = element.getDimensions();
		this.element.setStyle({
			left: offset[0] + 'px',
			top: offset[1] + 'px',
			width: dimensions.width + 'px',
			height: dimensions.height + 'px',
			zIndex: element.getStyle('zIndex') - 1
		}).show();
		return this;
	},
	setBounds: function(bounds) {
		for(prop in bounds)
			bounds[prop] += 'px';
		this.element.setStyle(bounds);
		return this;
	},
	destroy: function() {
		if(this.element)
			this.element.remove();
		return this;
	}
});

/**
 * @author Ryan Johnson &lt;http://syntacticx.com/&gt;
 * @copyright 2008 PersonalGrid Corporation &lt;http://personalgrid.com/&gt;
 * @package LivePipe UI
 * @license MIT
 * @url http://livepipe.net/control/tabs
 * @require prototype.js, livepipe.js
 */

if(typeof(Prototype) == "undefined")
	throw "Control.Tabs requires Prototype to be loaded.";
if(typeof(Object.Event) == "undefined")
	throw "Control.Tabs requires Object.Event to be loaded.";

Control.Tabs = Class.create({
	initialize: function(tab_list_container,options){
		if(!$(tab_list_container))
			throw "Control.Tabs could not find the element: " + tab_list_container;
		this.activeContainer = false;
		this.activeLink = false;
		this.containers = $H({});
		this.links = [];
		Control.Tabs.instances.push(this);
		this.options = {
			beforeChange: Prototype.emptyFunction,
			afterChange: Prototype.emptyFunction,
			hover: false,
			linkSelector: 'li a',
			setClassOnContainer: false,
			activeClassName: 'active',
			defaultTab: 'first',
			autoLinkExternal: true,
			targetRegExp: /#(.+)$/,
			showFunction: Element.show,
			hideFunction: Element.hide
		};
		Object.extend(this.options,options || {});
		(typeof(this.options.linkSelector == 'string')
			? $(tab_list_container).select(this.options.linkSelector)
			: this.options.linkSelector($(tab_list_container))
		).findAll(function(link){
			return (/^#/).exec((Prototype.Browser.WebKit ? decodeURIComponent(link.href) : link.href).replace(window.location.href.split('#')[0],''));
		}).each(function(link){
			this.addTab(link);
		}.bind(this));
		this.containers.values().each(Element.hide);
		if(this.options.defaultTab == 'first')
			this.setActiveTab(this.links.first());
		else if(this.options.defaultTab == 'last')
			this.setActiveTab(this.links.last());
		else
			this.setActiveTab(this.options.defaultTab);
		var targets = this.options.targetRegExp.exec(window.location);
		if(targets &amp;&amp; targets[1]){
			targets[1].split(',').each(function(target){
				this.setActiveTab(this.links.find(function(link){
					return link.key == target;
				}));
			}.bind(this));
		}
		if(this.options.autoLinkExternal){
			$A(document.getElementsByTagName('a')).each(function(a){
				if(!this.links.include(a)){
					var clean_href = a.href.replace(window.location.href.split('#')[0],'');
					if(clean_href.substring(0,1) == '#'){
						if(this.containers.keys().include(clean_href.substring(1))){
							$(a).observe('click',function(event,clean_href){
								this.setActiveTab(clean_href.substring(1));
							}.bindAsEventListener(this,clean_href));
						}
					}
				}
			}.bind(this));
		}
	},
	addTab: function(link){
		this.links.push(link);
		link.key = link.getAttribute('href').replace(window.location.href.split('#')[0],'').split('/').last().replace(/#/,'');
		var container = $(link.key);
		if(!container)
			throw "Control.Tabs: #" + link.key + " was not found on the page."
		this.containers.set(link.key,container);
		link[this.options.hover ? 'onmouseover' : 'onclick'] = function(link){
			if(window.event)
				Event.stop(window.event);
			this.setActiveTab(link);
			return false;
		}.bind(this,link);
	},
	setActiveTab: function(link){
		if(!link &amp;&amp; typeof(link) == 'undefined')
			return;
		if(typeof(link) == 'string'){
			this.setActiveTab(this.links.find(function(_link){
				return _link.key == link;
			}));
		}else if(typeof(link) == 'number'){
			this.setActiveTab(this.links[link]);
		}else{
			if(this.notify('beforeChange',this.activeContainer,this.containers.get(link.key)) === false)
				return;
			if(this.activeContainer)
				this.options.hideFunction(this.activeContainer);
			this.links.each(function(item){
				(this.options.setClassOnContainer ? $(item.parentNode) : item).removeClassName(this.options.activeClassName);
			}.bind(this));
			(this.options.setClassOnContainer ? $(link.parentNode) : link).addClassName(this.options.activeClassName);
			this.activeContainer = this.containers.get(link.key);
			this.activeLink = link;
			this.options.showFunction(this.containers.get(link.key));
			this.notify('afterChange',this.containers.get(link.key));
		}
	},
	next: function(){
		this.links.each(function(link,i){
			if(this.activeLink == link &amp;&amp; this.links[i + 1]){
				this.setActiveTab(this.links[i + 1]);
				throw $break;
			}
		}.bind(this));
	},
	previous: function(){
		this.links.each(function(link,i){
			if(this.activeLink == link &amp;&amp; this.links[i - 1]){
				this.setActiveTab(this.links[i - 1]);
				throw $break;
			}
		}.bind(this));
	},
	first: function(){
		this.setActiveTab(this.links.first());
	},
	last: function(){
		this.setActiveTab(this.links.last());
	}
});
Object.extend(Control.Tabs,{
	instances: [],
	findByTabId: function(id){
		return Control.Tabs.instances.find(function(tab){
			return tab.links.find(function(link){
				return link.key == id;
			});
		});
	}
});
Object.Event.extend(Control.Tabs);</code>
</property>
<property>
<name>control tabs</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.GroovyConsole</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>b941fe19-a4ae-4a6b-9c8d-60ef36b2b3e1</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>.border {
  background-color:#FAFAFF;
  border:1px solid gray;
}

.hidden {
	display: none;
}

#textarea-container {
	background-position: 98% bottom;
	background-repeat: no-repeat;
	background-image: url('../images/google-app-engine-groovy.png');
	margin-bottom: 10px;
}

#button-bar {
	padding: 5px;
	margin-bottom: 20px;
}

#loadingDiv {
	background-color: white;
	top: 4px;
}

.CodeMirror-line-numbers {
	color: gray;
	background-color: lightgray;
	padding: 5px;
	margin-right: 5px;
	font-family: monospace;
	font-size: 10pt;
}

.ui-tabs .ui-tabs-hide {
    display: none;
}

.ui-tabs .ui-tabs-panel {
	padding: 2px;
}

.ui-tabs .ui-tabs-nav li a {
	padding: 2px 4px 2px 4px;
	font-size: smaller;
}

#tabs li a.active {
background-color:#DDDDDD;
}
#tabs li a {
background-color:#FFFFFF;
color:#666666;
display:block;
height:20px;
padding:0 6px;
width:80px;
}

#tabs ul {
border-bottom:1px solid #CCCCCC;
clear:both;
height:20px;
list-style-image:none;
list-style-position:outside;
list-style-type:none;
margin:0 0 5px;
padding:0;
}

#tabs li {
float:left;
margin-right:7px;
text-align:center;
}

#tabs {
border: 1px solid lightGrey;
min-height: 300px;
}</code>
</property>
<property>
<name>groovy web console</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.GroovyConsole</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>a579d6bc-62aa-4e53-8140-0f5ecac5da53</guid>
<property>
<tags/>
</property>
</object>
<content>#if($xwiki.hasAccessLevel("programming", $doc.fullName))

#if($xwiki.jsfx)
$xwiki.jsfx.use("js/scriptaculous/effects.js")
#end
$xwiki.jsx.use($doc.fullName)
$xwiki.ssx.use($doc.fullName)

#if("$!request.from" != "" &amp;&amp; "$!request.id" != "")
  #set($scriptDoc = $xwiki.getDocument($request.from))
  #set($scriptObj = $scriptDoc.getObject('XWiki.ConsoleScriptClass', $util.parseInt($request.id)))
  #set($script = $scriptObj.getProperty('code').value)
#end

        &lt;img src="$doc.getAttachmentURL('groovy.png')" style="width:100px;margin-bottom:5px;"/&gt;

        #if("$!script" !="") Script: &lt;strong&gt;$scriptObj.getProperty('name').value&lt;/strong&gt; #end
        {pre}
        &lt;div id="textarea-container" class="border"&gt;
            &lt;textarea id="script" name="script" cols="140" rows="40"&gt;$!script&lt;/textarea&gt;
        &lt;/div&gt;
        {/pre}

        &lt;div id="button-bar" style="float:left"&gt;
            &lt;input id="executeButton" type="button" value="Execute"&gt;
        &lt;/div&gt;
        &lt;div id="loadingDiv" style="float:left" class="hidden"&gt;
            &lt;img src="$xwiki.getSkinFile('icons/ajax-loader.gif')"&gt;
        &lt;/div&gt;
        &lt;div style="float:right;margin-left:15px;"&gt;
          #if("$!script" != "")
          &lt;img id="saveScript" style="cursor:pointer;" 
                src="$xwiki.getSkinFile('icons/silk/script_save.gif')" title="Save script"/&gt;
          &lt;script type="text/javascript"&gt;
         $('saveScript').observe("click", function(){
            $('saveStatus').innerHTML = "";
            $('saveLoading').removeClassName("hidden");
            var ajx = new Ajax.Request("$scriptDoc.getURL('save')" , {
               parameters: {"XWiki.ConsoleScriptClass_${scriptObj.number}_code":editor.getCode(), "ajax":"1"},
               onComplete:function(transport){
                  $('saveLoading').addClassName("hidden");
                  $('saveStatus').removeClassName("hidden");
                  $('saveStatus').innerHTML = "Saved !";
                  var foo = new Effect.Highlight('saveStatus');
                  setTimeout(function(){
                     $('saveStatus').innerHTML = "";
                     $('saveStatus').addClassName("hidden");
                  }, 5000);
               }
            })
         });
          &lt;/script&gt;
          #end
          &lt;img id="openScript" style="cursor:pointer;" 
                src="$xwiki.getSkinFile('icons/silk/folder_explore.gif')" title="Open script"/&gt;
        &lt;/div&gt;
        &lt;script type="text/javascript"&gt;
         $('openScript').observe("click", function(){
            $('openScriptSelect').toggleClassName("hidden");
         });
        &lt;/script&gt;
        &lt;div id="saveStatus" style="float:right;" class="hidden"&gt;&lt;/div&gt;
        &lt;div id="saveLoading" style="float:right;" class="loading hidden"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;
        &lt;div id="openScriptSelect" style="float:right;" class="hidden"&gt;
          #set($scripts = $xwiki.search("select obj, name.value from BaseObject as obj, StringProperty as name where obj.className='XWiki.ConsoleScriptClass' and obj.id.id=name.id and name.id.name='name'"))
          #if($scripts.size() &gt; 0)
            &lt;select id="scriptExplorer"&gt;
            #foreach($item in $scripts)
              #set($script=$listtool.get($item, 0))
              &lt;option value="${script.name}_${script.number}"&gt;$listtool.get($item, 1)&lt;/option&gt;
            #end
            &lt;/select&gt;
            &lt;input type="button" value="Load" id="loadScript"/&gt;
            &lt;script type="text/javascript"&gt;
            $('loadScript').observe("click", function(){
                var doc = $('scriptExplorer').value.substring(0, $('scriptExplorer').value.lastIndexOf("_"));
                var id = $('scriptExplorer').value.substring($('scriptExplorer').value.lastIndexOf("_") + 1);
                window.location= "$doc.getURL('view')?from=" + doc + "&amp;id=" + id; 
            });
            &lt;/script&gt;
          #else
            No saved script could be found.
          #end
        &lt;/div&gt;
        &lt;div class="clearfloats"&gt;&lt;/div&gt;

        &lt;div id="tabs"&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href="#tresult"&gt;Result&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#toutput"&gt;Output&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="#tstacktrace"&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            
            &lt;div id="tresult"&gt;
                &lt;pre id="result"&gt;&lt;/pre&gt;
            &lt;/div&gt;
        
            &lt;div id="toutput"&gt;
                &lt;pre id="output"&gt;&lt;/pre&gt;
            &lt;/div&gt;
        
            &lt;div id="tstacktrace"&gt;
                &lt;pre id="stacktrace"&gt;&lt;/pre&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        {pre}
        &lt;script language="javascript"&gt;
        document.observe("xwiki:dom:loaded", function(){
          window.editor = CodeMirror.fromTextArea('script', {
                height: "400px",
                stylesheet: "/xwiki/bin/ssx/XWiki/GroovyConsoleEditorCode",
                path: "/xwiki/bin/jsx/XWiki/",
                continuousScanning: 500,
                lineNumbers: true,
                textWrapping: false,
                tabMode: "spaces"
            });
        });
        &lt;/script&gt;
        {/pre}

#else 
{image:Nopassingusa.png}

#error("No passing! Programming access level is required to access this page.")
#end</content></xwikidoc>
